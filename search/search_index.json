{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to AWSIM AWSIM is the best scene simulator for Autoware . Features Simualtor components included (Vehicle, Sensor, Environment, ROS2, etc) Support for Windows and Ubuntu ROS2 native communication Open source software Made with Unity Game Engine Download demo binary Download AWSIM Demo for ubuntu Please try the AWSIM demo binary first! you can find a tutorial on the Quick start demo page.","title":"Home"},{"location":"#welcome-to-awsim","text":"AWSIM is the best scene simulator for Autoware . Features Simualtor components included (Vehicle, Sensor, Environment, ROS2, etc) Support for Windows and Ubuntu ROS2 native communication Open source software Made with Unity Game Engine","title":"Welcome to AWSIM"},{"location":"#download-demo-binary","text":"Download AWSIM Demo for ubuntu Please try the AWSIM demo binary first! you can find a tutorial on the Quick start demo page.","title":"Download demo binary"},{"location":"Components/Environment/AWSIMEnvironment/","text":"AWSIM Environment Required Environment files AWSIM and Autowade require the following three Environment files. file use purpose lanelet2 (.osm) Autoware Autoware uses lane information. pointcloud (.pcd) Autoware Autoware uses point cloud information. 3D model (.fbx) AWSIM Used to render the environment within AWSIM. Overview AWSIM's Environment includes the following. Building, Road Traffic lights Traffic NPC Vehicle Pedestrian Tokyo West Shinjuku, Japan The sample 3D map of Tokyo West Shinjuku, Japan set up as a sample is available for distribution. See SetupUnityProject , where you can download the unitypackage. Building, Road Building has the greatest impact on self-position estimation by LiDARSensor. The road surface affects vehicle dynamics. Traffic lights To simulate signal recognition, the Traffic light must be strictly aligned with the VectorMap location. NPCVehicle runs based on traffic light control. Ego Vehicle performs signal recognition from camera sensor images. Traffic NPC The use of NPCs can add realism to self-driving simulations. NPCVehicle, NPCPedestrian to simulate traffic.","title":"AWSIM Environment"},{"location":"Components/Environment/AWSIMEnvironment/#awsim-environment","text":"","title":"AWSIM Environment"},{"location":"Components/Environment/AWSIMEnvironment/#required-environment-files","text":"AWSIM and Autowade require the following three Environment files. file use purpose lanelet2 (.osm) Autoware Autoware uses lane information. pointcloud (.pcd) Autoware Autoware uses point cloud information. 3D model (.fbx) AWSIM Used to render the environment within AWSIM.","title":"Required Environment files"},{"location":"Components/Environment/AWSIMEnvironment/#overview","text":"AWSIM's Environment includes the following. Building, Road Traffic lights Traffic NPC Vehicle Pedestrian","title":"Overview"},{"location":"Components/Environment/AWSIMEnvironment/#tokyo-west-shinjuku-japan","text":"The sample 3D map of Tokyo West Shinjuku, Japan set up as a sample is available for distribution. See SetupUnityProject , where you can download the unitypackage.","title":"Tokyo West Shinjuku, Japan"},{"location":"Components/Environment/AWSIMEnvironment/#building-road","text":"Building has the greatest impact on self-position estimation by LiDARSensor. The road surface affects vehicle dynamics.","title":"Building, Road"},{"location":"Components/Environment/AWSIMEnvironment/#traffic-lights","text":"To simulate signal recognition, the Traffic light must be strictly aligned with the VectorMap location. NPCVehicle runs based on traffic light control. Ego Vehicle performs signal recognition from camera sensor images.","title":"Traffic lights"},{"location":"Components/Environment/AWSIMEnvironment/#traffic-npc","text":"The use of NPCs can add realism to self-driving simulations. NPCVehicle, NPCPedestrian to simulate traffic.","title":"Traffic NPC"},{"location":"Components/Environment/AddNewEnvironment/","text":"Add New Environment 1. Create VectorMap Create a VectorMap using VectorMapBuilder from the pcd obtained from the actual LiDAR. 2. Create Environment 3D models Create a 3D model of the environment based on pcd; basically, Unity HDRP performs better when meshes are merged. In addition, occlusion culling and flutter culling cannot be used because the sensor's detection target will disappear. Each traffic light should have a separate GameObject. Also, each light in the traffic light should be split into separate materials. 3. Output Pcd from Mesh It may be difficult to make Enviornment's 3D model as accurate as the actual device. So, create a pcd from mesh in AWSIM. See PointCloudMapper","title":"Add New Environment"},{"location":"Components/Environment/AddNewEnvironment/#add-new-environment","text":"","title":"Add New Environment"},{"location":"Components/Environment/AddNewEnvironment/#1-create-vectormap","text":"Create a VectorMap using VectorMapBuilder from the pcd obtained from the actual LiDAR.","title":"1. Create VectorMap"},{"location":"Components/Environment/AddNewEnvironment/#2-create-environment-3d-models","text":"Create a 3D model of the environment based on pcd; basically, Unity HDRP performs better when meshes are merged. In addition, occlusion culling and flutter culling cannot be used because the sensor's detection target will disappear. Each traffic light should have a separate GameObject. Also, each light in the traffic light should be split into separate materials.","title":"2. Create Environment 3D models"},{"location":"Components/Environment/AddNewEnvironment/#3-output-pcd-from-mesh","text":"It may be difficult to make Enviornment's 3D model as accurate as the actual device. So, create a pcd from mesh in AWSIM. See PointCloudMapper","title":"3. Output Pcd from Mesh"},{"location":"Components/Environment/PointCloudMapper/","text":"PointCloudMapper Warning Currently works only on Windows. Will support ubuntu in the future. Description PointCloudMapper is a tool for a vehicle based point cloud mapping in a simulation space. Required Data Lanelet2 format OSM data 3D model map of the area Vehicle object with sensors How to Use Import OSM Drag and drop an OSM file into Unity project OSM file will be imported as OsmDataContainer . Setup Vehicle Sensors [RGL] Create an empty object Attach script LidarSensor.cs to the game object Configure lidar pattern, e.g. by selecting one of the available presets Attach script RGLMappingAdapter.cs to the game object. Configure mapping adapter - e.g. set leaf size for filtering. Setup PointCloudMapper In your scene, create new object and add PointCloudMapper component. Set following parameters in the inspector. - Osm Container : the OSM file you imported in the above step. - World Origin : MGRS position of the origin of the scene (in ROS coordinate system, not Unity). - Capture Location Interval : Distance between consecutive capture points along lanelet centerline. - Output Pcd File Path : Output relative path from Assets folder. - Target Vehicle : The vehicle you want to use for point cloud capturing. If using RGL, make sure that RGLSceneManager game object is added to the scene (a prefab is available). Capture and Generate PCD If you play your scene after the above steps, PointCloudMapper will automatically start mapping. The vehicle will warp along centerlines by intervals of CaptureLocationInterval and capture point cloud data. PCD file will be written when you stop your scene or all locations in the route are captured. Sample Scene PointCloudMappingDemo.unity is a sample scene for PointCloudMapper . You need to setup OSM data and 3D model map of the area according to the above steps. LiDAR Sensor integration Other LiDAR libraries If you want to use other libraries, your should provide a script that implements IMappingSensor. Finding your sensors and requesting data will be done automatically by PointCloudMapper","title":"PointCloudMapper"},{"location":"Components/Environment/PointCloudMapper/#pointcloudmapper","text":"Warning Currently works only on Windows. Will support ubuntu in the future.","title":"PointCloudMapper"},{"location":"Components/Environment/PointCloudMapper/#description","text":"PointCloudMapper is a tool for a vehicle based point cloud mapping in a simulation space.","title":"Description"},{"location":"Components/Environment/PointCloudMapper/#required-data","text":"Lanelet2 format OSM data 3D model map of the area Vehicle object with sensors","title":"Required Data"},{"location":"Components/Environment/PointCloudMapper/#how-to-use","text":"","title":"How to Use"},{"location":"Components/Environment/PointCloudMapper/#import-osm","text":"Drag and drop an OSM file into Unity project OSM file will be imported as OsmDataContainer .","title":"Import OSM"},{"location":"Components/Environment/PointCloudMapper/#setup-vehicle-sensors-rgl","text":"Create an empty object Attach script LidarSensor.cs to the game object Configure lidar pattern, e.g. by selecting one of the available presets Attach script RGLMappingAdapter.cs to the game object. Configure mapping adapter - e.g. set leaf size for filtering.","title":"Setup Vehicle Sensors [RGL]"},{"location":"Components/Environment/PointCloudMapper/#setup-pointcloudmapper","text":"In your scene, create new object and add PointCloudMapper component. Set following parameters in the inspector. - Osm Container : the OSM file you imported in the above step. - World Origin : MGRS position of the origin of the scene (in ROS coordinate system, not Unity). - Capture Location Interval : Distance between consecutive capture points along lanelet centerline. - Output Pcd File Path : Output relative path from Assets folder. - Target Vehicle : The vehicle you want to use for point cloud capturing. If using RGL, make sure that RGLSceneManager game object is added to the scene (a prefab is available).","title":"Setup PointCloudMapper"},{"location":"Components/Environment/PointCloudMapper/#capture-and-generate-pcd","text":"If you play your scene after the above steps, PointCloudMapper will automatically start mapping. The vehicle will warp along centerlines by intervals of CaptureLocationInterval and capture point cloud data. PCD file will be written when you stop your scene or all locations in the route are captured.","title":"Capture and Generate PCD"},{"location":"Components/Environment/PointCloudMapper/#sample-scene","text":"PointCloudMappingDemo.unity is a sample scene for PointCloudMapper . You need to setup OSM data and 3D model map of the area according to the above steps.","title":"Sample Scene"},{"location":"Components/Environment/PointCloudMapper/#lidar-sensor-integration","text":"","title":"LiDAR Sensor integration"},{"location":"Components/Environment/PointCloudMapper/#other-lidar-libraries","text":"If you want to use other libraries, your should provide a script that implements IMappingSensor. Finding your sensors and requesting data will be done automatically by PointCloudMapper","title":"Other LiDAR libraries"},{"location":"Components/ROS2/AddCustomROS2MessageType/","text":"Add custom ROS2 message type ROS2 For Unity AWSIM uses Ros2 For Unity module for ROS2 communication. ROS2 For Unity is a high-performance communication solution to connect Unity3D and ROS2 ecosystem in a ROS2 \"native\" way. This document briefly guides you on how to add your custom messages to the simulation. For a detailed description, please see ROS2 For Unity Readme . Prerequisites ROS2 For Unity depends on a ros2cs - a C# .NET library for ROS2. You don't have to install it manually, but there are a few prerequisites that must be resolved first. Please refer to the following prerequisites section for your OS: Ubuntu Windows https://github.com/RobotecAI/ros2cs/blob/master/README-UBUNTU.md#prerequisites https://github.com/RobotecAI/ros2cs/blob/1.2.0/README-WINDOWS.md#prerequisites Additionall required tools: Git Shell: Ubuntu Windows bash for Ubuntu powershell for Windows 10 Build custom messages To include a custom ROS2 message, you must build ROS2 For Unity with your custom message package. The following steps will assume that: the temporary ROS2 For Unity build folder is located in the home directory ~/ (Ubuntu) or on a C:\\ drive (Windows) your message package is called custom_msgs and is located in ~/custom_msgs (Ubuntu) or C:\\custom_msgs ROS2 version is galactic ( foxy and humble are also supported, please check the current AWSIM version for more information about its ROS2 version) and is located in Ubuntu Windows /opt/ros/galactic C:\\ros2_galactic Prepare workspace Get ROS2 For Unity repository. git clone https://github.com/RobotecAI/ros2-for-unity Pull repositories Ubuntu Windows cd ~/ros2-for-unity . /opt/ros/galactic/setup.bash ./pull_repositories.sh cd C :\\ ros2-for-unity C :\\ ros2_galactic \\ local_setup . ps1 .\\ pull_repositories . ps1 Setup custom_msgs package If the package is hosted on a git repository: open ros2-for-unity/ros2_for_unity_custom_messages.repos file in your favorite editor, modify the file contents, so it points to custom_msgs repository. The final file should look similar to (change <REPOSITORY_URL> to repository address, <BRANCH_NAME> to desired branch and <PACKAGE_NAME> to your package name - in this case custom_msgs ): # NOTE: Use this file if you want to build with custom messages that reside in a separate remote repo. # NOTE: use the following format repositories: src/ros2cs/custom_messages/<PACKAGE_NAME>: type: git url: <REPOSITORY_URL> version: <BRANCH_NAME> 1. pull repositories: Ubuntu Windows ./pull_repositories.sh .\\ pull_repositories . ps1 If the package is located on your hard-disk: copy custom_msgs package to src/ros2cs/custom_messages Ubuntu Windows cp -r ~/custom_msgs ~/ros2-for-unity/src/ros2cs/custom_messages/ cp -r ~/custom_msgs ~/ros2-for-unity/src/ros2cs/custom_messages/ Build ROS2 For Unity Build ROS2 For Unity Ubuntu Windows ./build.sh --standalone .\\build.ps1 -standalone Install custom_msgs to AWSIM New ROS2 For Unity build, which you just made, contains multiple libraries that already exist in the AWSIM. To install custom_msgs and not copy all other unnecessary files, you should get the custom_msgs related libraries only and copy them to the analogous directories in AWSIM/Assets/Ros2ForUnity . You can find them in following directories: ros2-for-unity/install/asset/Ros2ForUnity/Plugins which names matches custom_msgs_* Ubuntu Windows `ros2-for-unity/install/asset/Ros2ForUnity/Plugins/Linux/x86_64/` which names matches `libcustom_msgs_*` `ros2-for-unity/install/asset/Ros2ForUnity/Plugins/Windows/x86_64/` which names matches `custom_msgs_*` To automate the process, you can use these commands (change <AWSIM_DIR> to your E2Simulator path and <CUSTOM_MSGS_PACKAGE_NAME> to a custom messages package): Ubuntu Windows find ~/ros2-for-unity/install/asset/Ros2ForUnity/Plugins -maxdepth 1 -name \"<CUSTOM_MSGS_PACKAGE_NAME>*\" -type f -exec cp {} <AWSIM_DIR>/Assets/Ros2ForUnity/Plugins \\; find ~/ros2-for-unity/install/asset/Ros2ForUnity/Plugins/Linux/x86_64 -maxdepth 1 -name \"lib<CUSTOM_MSGS_PACKAGE_NAME>*\" -type f -exec cp {} <AWSIM_DIR>/Assets/Ros2ForUnity/Plugins/Linux/x86_64 \\; Get-ChildItem C:\\ros2-for-unity\\install\\asset\\Ros2ForUnity\\Plugins\\* -Include @('<CUSTOM_MSGS_PACKAGE_NAME>*') | Copy-Item -Destination <AWSIM_DIR>\\Assets\\Ros2ForUnity\\Plugins Get-ChildItem C:\\ros2-for-unity\\install\\asset\\Ros2ForUnity\\Plugins\\Windows\\x86_64\\* -Include @('<CUSTOM_MSGS_PACKAGE_NAME>*') | Copy-Item -Destination <AWSIM_DIR>\\Assets\\Ros2ForUnity\\Plugins\\Windows\\x86_64","title":"Add custom ROS2 msg type"},{"location":"Components/ROS2/AddCustomROS2MessageType/#add-custom-ros2-message-type","text":"","title":"Add custom ROS2 message type"},{"location":"Components/ROS2/AddCustomROS2MessageType/#ros2-for-unity","text":"AWSIM uses Ros2 For Unity module for ROS2 communication. ROS2 For Unity is a high-performance communication solution to connect Unity3D and ROS2 ecosystem in a ROS2 \"native\" way. This document briefly guides you on how to add your custom messages to the simulation. For a detailed description, please see ROS2 For Unity Readme .","title":"ROS2 For Unity"},{"location":"Components/ROS2/AddCustomROS2MessageType/#prerequisites","text":"ROS2 For Unity depends on a ros2cs - a C# .NET library for ROS2. You don't have to install it manually, but there are a few prerequisites that must be resolved first. Please refer to the following prerequisites section for your OS: Ubuntu Windows https://github.com/RobotecAI/ros2cs/blob/master/README-UBUNTU.md#prerequisites https://github.com/RobotecAI/ros2cs/blob/1.2.0/README-WINDOWS.md#prerequisites Additionall required tools: Git Shell: Ubuntu Windows bash for Ubuntu powershell for Windows 10","title":"Prerequisites"},{"location":"Components/ROS2/AddCustomROS2MessageType/#build-custom-messages","text":"To include a custom ROS2 message, you must build ROS2 For Unity with your custom message package. The following steps will assume that: the temporary ROS2 For Unity build folder is located in the home directory ~/ (Ubuntu) or on a C:\\ drive (Windows) your message package is called custom_msgs and is located in ~/custom_msgs (Ubuntu) or C:\\custom_msgs ROS2 version is galactic ( foxy and humble are also supported, please check the current AWSIM version for more information about its ROS2 version) and is located in Ubuntu Windows /opt/ros/galactic C:\\ros2_galactic","title":"Build custom messages"},{"location":"Components/ROS2/AddCustomROS2MessageType/#prepare-workspace","text":"Get ROS2 For Unity repository. git clone https://github.com/RobotecAI/ros2-for-unity Pull repositories Ubuntu Windows cd ~/ros2-for-unity . /opt/ros/galactic/setup.bash ./pull_repositories.sh cd C :\\ ros2-for-unity C :\\ ros2_galactic \\ local_setup . ps1 .\\ pull_repositories . ps1","title":"Prepare workspace"},{"location":"Components/ROS2/AddCustomROS2MessageType/#setup-custom_msgs-package","text":"If the package is hosted on a git repository: open ros2-for-unity/ros2_for_unity_custom_messages.repos file in your favorite editor, modify the file contents, so it points to custom_msgs repository. The final file should look similar to (change <REPOSITORY_URL> to repository address, <BRANCH_NAME> to desired branch and <PACKAGE_NAME> to your package name - in this case custom_msgs ): # NOTE: Use this file if you want to build with custom messages that reside in a separate remote repo. # NOTE: use the following format repositories: src/ros2cs/custom_messages/<PACKAGE_NAME>: type: git url: <REPOSITORY_URL> version: <BRANCH_NAME> 1. pull repositories: Ubuntu Windows ./pull_repositories.sh .\\ pull_repositories . ps1 If the package is located on your hard-disk: copy custom_msgs package to src/ros2cs/custom_messages Ubuntu Windows cp -r ~/custom_msgs ~/ros2-for-unity/src/ros2cs/custom_messages/ cp -r ~/custom_msgs ~/ros2-for-unity/src/ros2cs/custom_messages/","title":"Setup custom_msgs package"},{"location":"Components/ROS2/AddCustomROS2MessageType/#build-ros2-for-unity","text":"Build ROS2 For Unity Ubuntu Windows ./build.sh --standalone .\\build.ps1 -standalone","title":"Build ROS2 For Unity"},{"location":"Components/ROS2/AddCustomROS2MessageType/#install-custom_msgs-to-awsim","text":"New ROS2 For Unity build, which you just made, contains multiple libraries that already exist in the AWSIM. To install custom_msgs and not copy all other unnecessary files, you should get the custom_msgs related libraries only and copy them to the analogous directories in AWSIM/Assets/Ros2ForUnity . You can find them in following directories: ros2-for-unity/install/asset/Ros2ForUnity/Plugins which names matches custom_msgs_* Ubuntu Windows `ros2-for-unity/install/asset/Ros2ForUnity/Plugins/Linux/x86_64/` which names matches `libcustom_msgs_*` `ros2-for-unity/install/asset/Ros2ForUnity/Plugins/Windows/x86_64/` which names matches `custom_msgs_*` To automate the process, you can use these commands (change <AWSIM_DIR> to your E2Simulator path and <CUSTOM_MSGS_PACKAGE_NAME> to a custom messages package): Ubuntu Windows find ~/ros2-for-unity/install/asset/Ros2ForUnity/Plugins -maxdepth 1 -name \"<CUSTOM_MSGS_PACKAGE_NAME>*\" -type f -exec cp {} <AWSIM_DIR>/Assets/Ros2ForUnity/Plugins \\; find ~/ros2-for-unity/install/asset/Ros2ForUnity/Plugins/Linux/x86_64 -maxdepth 1 -name \"lib<CUSTOM_MSGS_PACKAGE_NAME>*\" -type f -exec cp {} <AWSIM_DIR>/Assets/Ros2ForUnity/Plugins/Linux/x86_64 \\; Get-ChildItem C:\\ros2-for-unity\\install\\asset\\Ros2ForUnity\\Plugins\\* -Include @('<CUSTOM_MSGS_PACKAGE_NAME>*') | Copy-Item -Destination <AWSIM_DIR>\\Assets\\Ros2ForUnity\\Plugins Get-ChildItem C:\\ros2-for-unity\\install\\asset\\Ros2ForUnity\\Plugins\\Windows\\x86_64\\* -Include @('<CUSTOM_MSGS_PACKAGE_NAME>*') | Copy-Item -Destination <AWSIM_DIR>\\Assets\\Ros2ForUnity\\Plugins\\Windows\\x86_64","title":"Install custom_msgs to AWSIM"},{"location":"Components/ROS2/ROS2TopicList/","text":"AWSIM publishes/subscribes to these topics. User can also add a custom msg type for ROS2. see also Add custom ROS2 msg type Publisher list category topic msg frame_id hz QoS clock /clock rosgraph_msgs/Clock none 100 Best effort , Volatile , Keep last/1 camera /sensing/camera/traffic_light/camera_info sensor_msgs/CameraInfo traffic_light_left_camera/camera_link 10 Best effort , Volatile , Keep last/1 camera /sensing/camera/traffic_light/image_raw sensor_msgs/Image traffic_light_left_camera/camera_link 10 Best effort , Volatile , Keep last/1 gnss /sensing/gnss/pose geometry_msgs/Pose gnss_link 1 Reliable , Volatile , Keep last/1 gnss /sensing/gnss/pose_with_covariance geometry_msgs/PoseWithCovarianceStamped gnss_link 1 Reliable , Volatile , Keep last/1 imu /sensing/imu/tamagawa/imu_raw sensor_msgs/Imu tamagawa/imu_link 30 Reliable , Volatile , Keep last/1000 lidar /sensing/lidar/top/pointcloud_raw sensor_msgs/PointCloud2 sensor_kit_base_link 10 Best effort , Volatile , Keep last/5 lidar /sensing/lidar/top/pointcloud_raw_ex sensor_msgs/PointCloud2 sensor_kit_base_link 10 Best effort , Volatile , Keep last/5 vehicle status /vehicle/status/control_mode autoware_auto_vehicle_msgs/ControlModeReport none 30 Reliable , Volatile , Keep last/1 vehicle status /vehicle/status/gear_status autoware_auto_vehicle_msgs/GearReport none 30 Reliable , Volatile , Keep last/1 vehicle status /vehicle/status/steering_status autoware_auto_vehicle_msgs/SteeringReport none 30 Reliable , Volatile , Keep last/1 vehicle status /vehicle/status/turn_indicators_status autoware_auto_vehicle_msgs/TurnIndicatorsReport none 30 Reliable , Volatile , Keep last/1 vehicle status /vehicle/status/hazard_lights_status autoware_auto_vehicle_msgs/HazardLightsReport none 30 Reliable , Volatile , Keep last/1 vehicle status /vehicle/status/velocity_status autoware_auto_vehicle_msgs/VehicleReport none 30 Reliable , Volatile , Keep last/1 Subscriber list category topic msg frame_id hz QoS control /control/command/turn_indicators_cmd autoware_auto_vehicle_msgs/TurnIndicatorsCommand none 10 Reliable , TransientLocal , KeepLast/1 control /control/command/hazard_lights_cmd autoware_auto_vehicle_msgs/HazardLightsCommand none 10 Reliable , TransientLocal , KeepLast/1 control /control/command/control_cmd autoware_auto_control_msgs/AckermannControlCommand none 60 Reliable , TransientLocal , KeepLast/1 control /control/command/gear_cmd autoware_auto_vehicle_msgs/GearCommand none 10 Reliable , TransientLocal , KeepLast/1 control /control/command/emergency_cmd tier4_vehicle_msgs/msg/VehicleEmergencyStamped none 60 Reliable , TransientLocal , KeepLast/1","title":"ROS2 topic list"},{"location":"Components/ROS2/ROS2TopicList/#publisher-list","text":"category topic msg frame_id hz QoS clock /clock rosgraph_msgs/Clock none 100 Best effort , Volatile , Keep last/1 camera /sensing/camera/traffic_light/camera_info sensor_msgs/CameraInfo traffic_light_left_camera/camera_link 10 Best effort , Volatile , Keep last/1 camera /sensing/camera/traffic_light/image_raw sensor_msgs/Image traffic_light_left_camera/camera_link 10 Best effort , Volatile , Keep last/1 gnss /sensing/gnss/pose geometry_msgs/Pose gnss_link 1 Reliable , Volatile , Keep last/1 gnss /sensing/gnss/pose_with_covariance geometry_msgs/PoseWithCovarianceStamped gnss_link 1 Reliable , Volatile , Keep last/1 imu /sensing/imu/tamagawa/imu_raw sensor_msgs/Imu tamagawa/imu_link 30 Reliable , Volatile , Keep last/1000 lidar /sensing/lidar/top/pointcloud_raw sensor_msgs/PointCloud2 sensor_kit_base_link 10 Best effort , Volatile , Keep last/5 lidar /sensing/lidar/top/pointcloud_raw_ex sensor_msgs/PointCloud2 sensor_kit_base_link 10 Best effort , Volatile , Keep last/5 vehicle status /vehicle/status/control_mode autoware_auto_vehicle_msgs/ControlModeReport none 30 Reliable , Volatile , Keep last/1 vehicle status /vehicle/status/gear_status autoware_auto_vehicle_msgs/GearReport none 30 Reliable , Volatile , Keep last/1 vehicle status /vehicle/status/steering_status autoware_auto_vehicle_msgs/SteeringReport none 30 Reliable , Volatile , Keep last/1 vehicle status /vehicle/status/turn_indicators_status autoware_auto_vehicle_msgs/TurnIndicatorsReport none 30 Reliable , Volatile , Keep last/1 vehicle status /vehicle/status/hazard_lights_status autoware_auto_vehicle_msgs/HazardLightsReport none 30 Reliable , Volatile , Keep last/1 vehicle status /vehicle/status/velocity_status autoware_auto_vehicle_msgs/VehicleReport none 30 Reliable , Volatile , Keep last/1","title":"Publisher list"},{"location":"Components/ROS2/ROS2TopicList/#subscriber-list","text":"category topic msg frame_id hz QoS control /control/command/turn_indicators_cmd autoware_auto_vehicle_msgs/TurnIndicatorsCommand none 10 Reliable , TransientLocal , KeepLast/1 control /control/command/hazard_lights_cmd autoware_auto_vehicle_msgs/HazardLightsCommand none 10 Reliable , TransientLocal , KeepLast/1 control /control/command/control_cmd autoware_auto_control_msgs/AckermannControlCommand none 60 Reliable , TransientLocal , KeepLast/1 control /control/command/gear_cmd autoware_auto_vehicle_msgs/GearCommand none 10 Reliable , TransientLocal , KeepLast/1 control /control/command/emergency_cmd tier4_vehicle_msgs/msg/VehicleEmergencyStamped none 60 Reliable , TransientLocal , KeepLast/1","title":"Subscriber list"},{"location":"Components/Sensors/CameraSensor/","text":"Camera Sensor CameraSensor is used for Autoware traffic light recognition. Prefabs Path : Assets\\AWSIM\\Prefabs\\Sensors\\CameraSensor.prefab Scripts Path : Assets\\AWSIM\\Prefabs\\Sensors\\CameraSensor\\* script feature CameraSensor.cs Camera Sensor. Apply OpenCV distortion and encode to bgr8 format. Use ComputeShader. CameraRos2Publisher.cs Convert the data output from CameraSensor to ROS2 msg and Publish. Output Data field type feature ImageDataBuffer CameraParameters ROS2 Publish Topics topic msg frame_id hz QoS camera /sensing/camera/traffic_light/camera_info sensor_msgs/CameraInfo traffic_light_left_camera/camera_link 10 camera /sensing/camera/traffic_light/image_raw sensor_msgs/Image traffic_light_left_camera/camera_link 10","title":"Camera Sensor"},{"location":"Components/Sensors/CameraSensor/#camera-sensor","text":"CameraSensor is used for Autoware traffic light recognition.","title":"Camera Sensor"},{"location":"Components/Sensors/CameraSensor/#prefabs","text":"Path : Assets\\AWSIM\\Prefabs\\Sensors\\CameraSensor.prefab","title":"Prefabs"},{"location":"Components/Sensors/CameraSensor/#scripts","text":"Path : Assets\\AWSIM\\Prefabs\\Sensors\\CameraSensor\\* script feature CameraSensor.cs Camera Sensor. Apply OpenCV distortion and encode to bgr8 format. Use ComputeShader. CameraRos2Publisher.cs Convert the data output from CameraSensor to ROS2 msg and Publish.","title":"Scripts"},{"location":"Components/Sensors/CameraSensor/#output-data","text":"field type feature ImageDataBuffer CameraParameters","title":"Output Data"},{"location":"Components/Sensors/CameraSensor/#ros2-publish-topics","text":"topic msg frame_id hz QoS camera /sensing/camera/traffic_light/camera_info sensor_msgs/CameraInfo traffic_light_left_camera/camera_link 10 camera /sensing/camera/traffic_light/image_raw sensor_msgs/Image traffic_light_left_camera/camera_link 10","title":"ROS2 Publish Topics"},{"location":"Components/Sensors/GNSSSensor/","text":"GNSS Sensor GNSS Sensor is Global Navigation Satellite System Sensor. The GNSS sensor outputs the position in the MGRS coordinate system. Prefabs Path : Assets\\AWSIM\\Prefabs\\Sensors\\GnssSensor.prefab Scripts Path : Assets\\AWSIM\\Prefabs\\Sensors\\Gnss\\* script feature GnssSensor.cs GNSS sensor. Publish pose and poseWithCovarianceStamped in MGRS coordinate system. Need to set the MgrsReference of the Environment for the MGRS coordinate system. GnssRos2Publisher.cs Convert the data output from GnssSensor to ROS2 msg and Publish. Output Data GnssSensor.OutputData properties field type feature MgrsPosition Vector3 Position in the MGRS coordinate system. ROS2 Publish Topics Topics published by GnssRos2Publisher topic msg frame_id hz QoS /sensing/gnss/pose geometry_msgs/Pose gnss_link 1 Reliable , Volatile , Keep last/1 /sensing/gnss/pose_with_covariance geometry_msgs/PoseWithCovarianceStamped gnss_link 1 Reliable , Volatile , Keep last/1","title":"GNSS Sensor"},{"location":"Components/Sensors/GNSSSensor/#gnss-sensor","text":"GNSS Sensor is Global Navigation Satellite System Sensor. The GNSS sensor outputs the position in the MGRS coordinate system.","title":"GNSS Sensor"},{"location":"Components/Sensors/GNSSSensor/#prefabs","text":"Path : Assets\\AWSIM\\Prefabs\\Sensors\\GnssSensor.prefab","title":"Prefabs"},{"location":"Components/Sensors/GNSSSensor/#scripts","text":"Path : Assets\\AWSIM\\Prefabs\\Sensors\\Gnss\\* script feature GnssSensor.cs GNSS sensor. Publish pose and poseWithCovarianceStamped in MGRS coordinate system. Need to set the MgrsReference of the Environment for the MGRS coordinate system. GnssRos2Publisher.cs Convert the data output from GnssSensor to ROS2 msg and Publish.","title":"Scripts"},{"location":"Components/Sensors/GNSSSensor/#output-data","text":"GnssSensor.OutputData properties field type feature MgrsPosition Vector3 Position in the MGRS coordinate system.","title":"Output Data"},{"location":"Components/Sensors/GNSSSensor/#ros2-publish-topics","text":"Topics published by GnssRos2Publisher topic msg frame_id hz QoS /sensing/gnss/pose geometry_msgs/Pose gnss_link 1 Reliable , Volatile , Keep last/1 /sensing/gnss/pose_with_covariance geometry_msgs/PoseWithCovarianceStamped gnss_link 1 Reliable , Volatile , Keep last/1","title":"ROS2 Publish Topics"},{"location":"Components/Sensors/IMUSensor/","text":"IMU Sensor IMU Sensor is IMU Sensor stands for Inetial Measurement Unit Sensor. Prefabs Path : Assets\\AWSIM\\Prefabs\\Sensors\\IMUSensor.prefab Scripts Path : Assets\\AWSIM\\Scripts\\Sensors\\Imu\\* script feature ImuSensor.cs IMU (Inertial Measurement Unit) Sensor. Measure the Acceleration(m/s^2) and AngularVelocity(rad/s) based on the Transform of the GameObject to which this component is attached, and publish it to ROS2. ImuRos2Publisher.cs Convert the data output from ImuSensor to ROS2 msg and Publish. Output Data ImuSensor.OutputData properties field type feature LinearAcceleration Vector3 Measured acceleration (m/s^2) AungularVelocity Vector3 Measured angular velocity (rad/s) ROS2 Publish Topics Topics published by ImuRos2Publisher topic msg frame_id hz QoS /sensing/imu/tamagawa/imu_raw sensor_msgs/Imu tamagawa/imu_link 30 Reliable , Volatile , Keep last/1000","title":"IMU Sensor"},{"location":"Components/Sensors/IMUSensor/#imu-sensor","text":"IMU Sensor is IMU Sensor stands for Inetial Measurement Unit Sensor.","title":"IMU Sensor"},{"location":"Components/Sensors/IMUSensor/#prefabs","text":"Path : Assets\\AWSIM\\Prefabs\\Sensors\\IMUSensor.prefab","title":"Prefabs"},{"location":"Components/Sensors/IMUSensor/#scripts","text":"Path : Assets\\AWSIM\\Scripts\\Sensors\\Imu\\* script feature ImuSensor.cs IMU (Inertial Measurement Unit) Sensor. Measure the Acceleration(m/s^2) and AngularVelocity(rad/s) based on the Transform of the GameObject to which this component is attached, and publish it to ROS2. ImuRos2Publisher.cs Convert the data output from ImuSensor to ROS2 msg and Publish.","title":"Scripts"},{"location":"Components/Sensors/IMUSensor/#output-data","text":"ImuSensor.OutputData properties field type feature LinearAcceleration Vector3 Measured acceleration (m/s^2) AungularVelocity Vector3 Measured angular velocity (rad/s)","title":"Output Data"},{"location":"Components/Sensors/IMUSensor/#ros2-publish-topics","text":"Topics published by ImuRos2Publisher topic msg frame_id hz QoS /sensing/imu/tamagawa/imu_raw sensor_msgs/Imu tamagawa/imu_link 30 Reliable , Volatile , Keep last/1000","title":"ROS2 Publish Topics"},{"location":"Components/Sensors/LiDARSensor/","text":"Lidar Sensor AWSIM uses Robotec GPU Lidar, which is a cross-platform (Windows and Linux), RTX-accelerated, CUDA/C++ library developed by Robotec.AI . For more info on RGL, visit its repository . To use RGL in AWSIM, Unity integration is prepared (RGLUnityPlugin). Output Data LidarSensor.OutputData properties field type feature hitCount int Number of rays that actually has hit anything hits Vector3 [ ] Vertices for visualization (Unity coordinate frame) rosPCL24 byte [ ] Vertices for publishing Autoware format pointcloud, ROS coordinate frame rosPCL48 byte [ ] Vertices for publishing extended Autoware format pointcloud, ROS coordinate frame ROS2 Publish Topics Topics published by RglLidarPublisher topic msg frame_id hz QoS /lidar/pointcloud sensor_msgs/PointCloud2 world 10 Reliable , Volatile , Keep last/1 /lidar/pointcloud_ex sensor_msgs/PointCloud2 world 10 Reliable , Volatile , Keep last/1 Minimal scene The scene Assets/AWSIM/Scenes/Samples/LidarSceneDevelop.unity can be used as a complete, minimalistic example of how to setup RGL. It contains RGLSceneManager, four lidars, and an environment composed of floor and walls. RGLSceneManager Each scene needs RGLSceneManager for synchronizing models between Unity and RGL. On every frame, it detects changes happening on the scene and reacts appropriately. Three different strategies to obtain 3D model for game objects are implemented. RGLSceneManager yields a collection of RGL objects found in provided game objects, based on: Only Colliders - active colliders only, Regular Meshes And Colliders Instead Of Skinned - mesh for non-skinned MeshRenderers or set of colliders (if provided) attached to the rootBone and below for SkinnedMeshRenderers, RegularMeshesAndSkinnedMeshes - mesh for both MeshRenderer and SkinnedMeshRenderer. Mesh source can be changed in the Scene Manager (Script) properties: Note: RGLSceneManager performance depends on mesh source option selected. Setup instructions for new scenes: Create an empty object (name it RGLSceneManager). Attach script SceneManager.cs to the RGLSceneManager object. Lidar Lidar objects typically consist of three scripts: LidarSensor - provides lidar configuration and performs raytrace PointCloudVisualization - visualizes point cloud collected by lidar RglLidarPublisher - converts the data output from LidarSensor to ROS2 msg and publishes it To use one of the prepared prefab lidars, drag the prefab file and drop it into a scene: After that the new object with scripts, colliders, and mesh will be created: Next, you can modify scripts parameters in Unity Inspector: In LidarSensor lidar configuration can be changed: Automatic Capture Hz - the rate of sensor processing Model Preset - allows selecting one of the built-in LiDAR models Apply Gaussian Noise - enable/disable gaussian noise Configuration - advanced lidar configuration (in most cases no need to change) Laser Array - geometry description of lidar array Horizontal Steps - the number of laser array firings between Min H Angle and Max H Angle Min H Angle - minimum horizontal angle (left) Max H Angle - maximum horizontal angle (right) Max Range - maximum range of the sensor Noise Params - lidar noise paramteres In the script Point Cloud Visualization the material of points can be changed. If material is None then PointCloudMaterial from Assets/RGLUnityPlugin/Resources will be loaded. You can disable visualization by deactivating the script. Point Cloud Visualization preview: In the last script - RglLidarPublisher - ROS properties such as topics names, frame ID, publish activation or QoS settings can be modified: Adding new lidar models To add a new lidar model, perform the following steps: Add its name to the LidarModels.cs If the Lidar has a non-uniform laser array construction (e.g. different linear/angular spacing between lasers), add an entry to the LaserArrayLibrary . Add an entry to LidarConfigurationLibrary . Use the provided laser array or generate a uniform one using static method LaserArray.Uniform() . Done. New lidar preset should be available via Unity Inspector. Creating Lidar object (or prefab) Create an empty object Attach script LidarSensor.cs . PointCloudVisualization.cs will be added automatically, however, you can disable it. Now you can add a callback from another script to receive a notification when data is ready: lidarSensor = GetComponent < LidarSensor >(); lidarSensor . OnOutputData += HandleLidarDataMethod ; For publishing point cloud via ROS2 attach script RglLidarPublisher.cs Prefabs Four prefabs were created with different lidar model configurations. Paths: Assets/AWSIM/Prefabs/Sensors/RobotecGPULidars/HesaiPandar40P.prefab Assets/AWSIM/Prefabs/Sensors/RobotecGPULidars/HesaiPandarQT64.prefab Assets/AWSIM/Prefabs/Sensors/RobotecGPULidars/VelodyneVLP16.prefab Assets/AWSIM/Prefabs/Sensors/RobotecGPULidars/VelodyneVLS128.prefab Objects requirements Objects, to be detectable by Robotec GPU lidar, must fulfill the following requirements: Contain one of the components: Collider, Mesh Renderer, or Skinned Mesh Renderer. It depends on RGLSceneManager mesh source parameter. Be readable from CPU-accessible memory. It can be achieved using the \u201cRead/Write Enabled\u201d checkbox in mesh settings. Note: Primitive Objects are readable by default. Scripts Paths: Assets/RGLUnityPlugin/Scripts/SceneManager.cs Assets/RGLUnityPlugin/Scripts/LidarSensor.cs Assets/RGLUnityPlugin/Scripts/PointCloudVisualization.cs Assets/AWSIM/Scripts/Sensors/LiDAR/RglLidarPublisher.cs script feature SceneManager.cs Synchronize the scene between Unity and RGL. LidarSensor.cs Lidar Sensor. Provide lidar configuration and collect point cloud. PointCloudVisualization.cs Visualize point cloud collected by lidar. RglLidarPublisher.cs Convert the data output from LidarSensor to ROS2 msg and publish.","title":"LiDAR Sensor"},{"location":"Components/Sensors/LiDARSensor/#lidar-sensor","text":"AWSIM uses Robotec GPU Lidar, which is a cross-platform (Windows and Linux), RTX-accelerated, CUDA/C++ library developed by Robotec.AI . For more info on RGL, visit its repository . To use RGL in AWSIM, Unity integration is prepared (RGLUnityPlugin).","title":"Lidar Sensor"},{"location":"Components/Sensors/LiDARSensor/#output-data","text":"LidarSensor.OutputData properties field type feature hitCount int Number of rays that actually has hit anything hits Vector3 [ ] Vertices for visualization (Unity coordinate frame) rosPCL24 byte [ ] Vertices for publishing Autoware format pointcloud, ROS coordinate frame rosPCL48 byte [ ] Vertices for publishing extended Autoware format pointcloud, ROS coordinate frame","title":"Output Data"},{"location":"Components/Sensors/LiDARSensor/#ros2-publish-topics","text":"Topics published by RglLidarPublisher topic msg frame_id hz QoS /lidar/pointcloud sensor_msgs/PointCloud2 world 10 Reliable , Volatile , Keep last/1 /lidar/pointcloud_ex sensor_msgs/PointCloud2 world 10 Reliable , Volatile , Keep last/1","title":"ROS2 Publish Topics"},{"location":"Components/Sensors/LiDARSensor/#minimal-scene","text":"The scene Assets/AWSIM/Scenes/Samples/LidarSceneDevelop.unity can be used as a complete, minimalistic example of how to setup RGL. It contains RGLSceneManager, four lidars, and an environment composed of floor and walls.","title":"Minimal scene"},{"location":"Components/Sensors/LiDARSensor/#rglscenemanager","text":"Each scene needs RGLSceneManager for synchronizing models between Unity and RGL. On every frame, it detects changes happening on the scene and reacts appropriately. Three different strategies to obtain 3D model for game objects are implemented. RGLSceneManager yields a collection of RGL objects found in provided game objects, based on: Only Colliders - active colliders only, Regular Meshes And Colliders Instead Of Skinned - mesh for non-skinned MeshRenderers or set of colliders (if provided) attached to the rootBone and below for SkinnedMeshRenderers, RegularMeshesAndSkinnedMeshes - mesh for both MeshRenderer and SkinnedMeshRenderer. Mesh source can be changed in the Scene Manager (Script) properties: Note: RGLSceneManager performance depends on mesh source option selected. Setup instructions for new scenes: Create an empty object (name it RGLSceneManager). Attach script SceneManager.cs to the RGLSceneManager object.","title":"RGLSceneManager"},{"location":"Components/Sensors/LiDARSensor/#lidar","text":"Lidar objects typically consist of three scripts: LidarSensor - provides lidar configuration and performs raytrace PointCloudVisualization - visualizes point cloud collected by lidar RglLidarPublisher - converts the data output from LidarSensor to ROS2 msg and publishes it To use one of the prepared prefab lidars, drag the prefab file and drop it into a scene: After that the new object with scripts, colliders, and mesh will be created: Next, you can modify scripts parameters in Unity Inspector: In LidarSensor lidar configuration can be changed: Automatic Capture Hz - the rate of sensor processing Model Preset - allows selecting one of the built-in LiDAR models Apply Gaussian Noise - enable/disable gaussian noise Configuration - advanced lidar configuration (in most cases no need to change) Laser Array - geometry description of lidar array Horizontal Steps - the number of laser array firings between Min H Angle and Max H Angle Min H Angle - minimum horizontal angle (left) Max H Angle - maximum horizontal angle (right) Max Range - maximum range of the sensor Noise Params - lidar noise paramteres In the script Point Cloud Visualization the material of points can be changed. If material is None then PointCloudMaterial from Assets/RGLUnityPlugin/Resources will be loaded. You can disable visualization by deactivating the script. Point Cloud Visualization preview: In the last script - RglLidarPublisher - ROS properties such as topics names, frame ID, publish activation or QoS settings can be modified:","title":"Lidar"},{"location":"Components/Sensors/LiDARSensor/#adding-new-lidar-models","text":"To add a new lidar model, perform the following steps: Add its name to the LidarModels.cs If the Lidar has a non-uniform laser array construction (e.g. different linear/angular spacing between lasers), add an entry to the LaserArrayLibrary . Add an entry to LidarConfigurationLibrary . Use the provided laser array or generate a uniform one using static method LaserArray.Uniform() . Done. New lidar preset should be available via Unity Inspector.","title":"Adding new lidar models"},{"location":"Components/Sensors/LiDARSensor/#creating-lidar-object-or-prefab","text":"Create an empty object Attach script LidarSensor.cs . PointCloudVisualization.cs will be added automatically, however, you can disable it. Now you can add a callback from another script to receive a notification when data is ready: lidarSensor = GetComponent < LidarSensor >(); lidarSensor . OnOutputData += HandleLidarDataMethod ; For publishing point cloud via ROS2 attach script RglLidarPublisher.cs","title":"Creating Lidar object (or prefab)"},{"location":"Components/Sensors/LiDARSensor/#prefabs","text":"Four prefabs were created with different lidar model configurations. Paths: Assets/AWSIM/Prefabs/Sensors/RobotecGPULidars/HesaiPandar40P.prefab Assets/AWSIM/Prefabs/Sensors/RobotecGPULidars/HesaiPandarQT64.prefab Assets/AWSIM/Prefabs/Sensors/RobotecGPULidars/VelodyneVLP16.prefab Assets/AWSIM/Prefabs/Sensors/RobotecGPULidars/VelodyneVLS128.prefab","title":"Prefabs"},{"location":"Components/Sensors/LiDARSensor/#objects-requirements","text":"Objects, to be detectable by Robotec GPU lidar, must fulfill the following requirements: Contain one of the components: Collider, Mesh Renderer, or Skinned Mesh Renderer. It depends on RGLSceneManager mesh source parameter. Be readable from CPU-accessible memory. It can be achieved using the \u201cRead/Write Enabled\u201d checkbox in mesh settings. Note: Primitive Objects are readable by default.","title":"Objects requirements"},{"location":"Components/Sensors/LiDARSensor/#scripts","text":"Paths: Assets/RGLUnityPlugin/Scripts/SceneManager.cs Assets/RGLUnityPlugin/Scripts/LidarSensor.cs Assets/RGLUnityPlugin/Scripts/PointCloudVisualization.cs Assets/AWSIM/Scripts/Sensors/LiDAR/RglLidarPublisher.cs script feature SceneManager.cs Synchronize the scene between Unity and RGL. LidarSensor.cs Lidar Sensor. Provide lidar configuration and collect point cloud. PointCloudVisualization.cs Visualize point cloud collected by lidar. RglLidarPublisher.cs Convert the data output from LidarSensor to ROS2 msg and publish.","title":"Scripts"},{"location":"Components/Traffic/RandomTraffic/AddRandomTrafficEnvironment/","text":"Add Environment for Random Traffic This page describes the steps to add environment components required by RandomTrafficSimulator . Prepare Map Add 3d model map to be annotated to the scene. Make sure that an Environment component with appropriate mgrsOffsetPosition is attached to the root GameObject. Annotate Traffic Lights Attach TrafficLight component to all traffic light game objects. Load Lanelet Open AWSIM -> Random Traffic -> Load Lanelet . Set OSM file and change settings as needed. Waypoint settings affect the density and accuracy of the waypoints generated. - Resolution - Resolution of resampling. Lower values provide better accuracy at the cost of processing time. - Min Delta Length - Minimum length(m) between adjacent points. - Min Delta Angle - Minimum angle(deg) between adjacent edges. Lowering this value produces a smoother curve. Click the Load button. Environment components are generated. Click Load button. TrafficLane components and StopLine objects should be placed as child objects of Environment game object. You can check them in a editor view by selecting them. Annotate Traffic Intersections Add an empty GameObject named TrafficIntersections in the same hierarchy as the TrafficLanes object. For each intersection, do the following: 1. Add an object named TrafficIntersection as a child object of the TrafficIntersections object. Attach a TrafficIntersection component. 2. Set BoxCollider to cover the intersection. This is used for detecting vehicles in the intersection. 3. Set TrafficLightGroups. Each group is controlled to have different signals, so facing traffic lights should be added to the same group. These groupings are used in traffic signal control. 4. Specifies the signal control pattern. Annotate Additional Right of Ways You need to annotate right of ways of TrafficLane manually for unsignalized intersections. Select straight lane that is not right of way in the intersection. The selected lane should be highlighted.(The image is for illustration.) Click Set RightOfWays button. Check all lanes that intersect the lane are highlighted yellow.(The image is for illustration.) Annotate Additional Stop Lines For each right turn lane that yields to the opposite straight or left turn lane, a stop line needs to be defined near the center of the intersection. If there is no visible stop line, a StopLine component should be added near the center of the intersection and associated with TrafficLane . Run and Check Random Traffic Once all the components are ready, let's get the random traffic moving once. For each intersection, review the settings of the relevant components if vehicles are unable to proceed.","title":"Add Random Traffic Environment"},{"location":"Components/Traffic/RandomTraffic/AddRandomTrafficEnvironment/#add-environment-for-random-traffic","text":"This page describes the steps to add environment components required by RandomTrafficSimulator .","title":"Add Environment for Random Traffic"},{"location":"Components/Traffic/RandomTraffic/AddRandomTrafficEnvironment/#prepare-map","text":"Add 3d model map to be annotated to the scene. Make sure that an Environment component with appropriate mgrsOffsetPosition is attached to the root GameObject.","title":"Prepare Map"},{"location":"Components/Traffic/RandomTraffic/AddRandomTrafficEnvironment/#annotate-traffic-lights","text":"Attach TrafficLight component to all traffic light game objects.","title":"Annotate Traffic Lights"},{"location":"Components/Traffic/RandomTraffic/AddRandomTrafficEnvironment/#load-lanelet","text":"Open AWSIM -> Random Traffic -> Load Lanelet . Set OSM file and change settings as needed. Waypoint settings affect the density and accuracy of the waypoints generated. - Resolution - Resolution of resampling. Lower values provide better accuracy at the cost of processing time. - Min Delta Length - Minimum length(m) between adjacent points. - Min Delta Angle - Minimum angle(deg) between adjacent edges. Lowering this value produces a smoother curve. Click the Load button. Environment components are generated. Click Load button. TrafficLane components and StopLine objects should be placed as child objects of Environment game object. You can check them in a editor view by selecting them.","title":"Load Lanelet"},{"location":"Components/Traffic/RandomTraffic/AddRandomTrafficEnvironment/#annotate-traffic-intersections","text":"Add an empty GameObject named TrafficIntersections in the same hierarchy as the TrafficLanes object. For each intersection, do the following: 1. Add an object named TrafficIntersection as a child object of the TrafficIntersections object. Attach a TrafficIntersection component. 2. Set BoxCollider to cover the intersection. This is used for detecting vehicles in the intersection. 3. Set TrafficLightGroups. Each group is controlled to have different signals, so facing traffic lights should be added to the same group. These groupings are used in traffic signal control. 4. Specifies the signal control pattern.","title":"Annotate Traffic Intersections"},{"location":"Components/Traffic/RandomTraffic/AddRandomTrafficEnvironment/#annotate-additional-right-of-ways","text":"You need to annotate right of ways of TrafficLane manually for unsignalized intersections. Select straight lane that is not right of way in the intersection. The selected lane should be highlighted.(The image is for illustration.) Click Set RightOfWays button. Check all lanes that intersect the lane are highlighted yellow.(The image is for illustration.)","title":"Annotate Additional Right of Ways"},{"location":"Components/Traffic/RandomTraffic/AddRandomTrafficEnvironment/#annotate-additional-stop-lines","text":"For each right turn lane that yields to the opposite straight or left turn lane, a stop line needs to be defined near the center of the intersection. If there is no visible stop line, a StopLine component should be added near the center of the intersection and associated with TrafficLane .","title":"Annotate Additional Stop Lines"},{"location":"Components/Traffic/RandomTraffic/AddRandomTrafficEnvironment/#run-and-check-random-traffic","text":"Once all the components are ready, let's get the random traffic moving once. For each intersection, review the settings of the relevant components if vehicles are unable to proceed.","title":"Run and Check Random Traffic"},{"location":"Components/Traffic/RandomTraffic/RandomTrafficSimulator/","text":"Random Traffic Simulator The RandomTrafficSimulator simulates random behaviour of NPCs that folows traffic rules. It allows you to add vehicles as obstacles in a driving simulation. Getting Started Overview The RandomTraffic system consists of the following components: RandomTrafficSimulator component manages lifecycle of NPCs and simulates NPC behaviours. Additional Environment components( TrafficLane , TrafficIntersection and StopLine ) helps you to annotate traffic rules. NPCVehicle components are updated by RandomTrafficSimulator Ego vehicle can be referenced to be considered in the simulation steps. Quick Start Prepare nishishinjuku environment assets. Open and play Scenes/Main/RandomTraffic.unity . NPCs should be generated in the scene and move along the lanes. You can control ego vehicle with arrow keys For manual setup, please read Components Settings and Add Environment for Random Traffic Components Settings Parameter Description Seed Seed value for random generator Ego Vehicle Transform of ego vehicle Vehicle Layer Mask LayerMask that masks only vehicle(NPC and ego) colliders Ground Layer Mask LayerMask that masks only ground colliders of the map NPC Vehicle Settings Max Vehicle Count Maximum number of NPC vehicles NPC Prefabs Prefabs of NPC vehicles which should have NPCVehicle component Spawnable Lanes TrafficLane components where NPC vehicles can spawn Vehicle Config Parameters for NPC vehicle control Sudden Deceleration is a deceleration during emergency braking Debug Show Gizmos Enable the checkbox to show editor gizmos that visualize behaviours of NPCs Gizmos Gizmos are useful for checking current behavior of NPCs and its causes. Gizmos have a high display load so please disable it if the editor is laggy.","title":"Random Traffic Simulator"},{"location":"Components/Traffic/RandomTraffic/RandomTrafficSimulator/#random-traffic-simulator","text":"The RandomTrafficSimulator simulates random behaviour of NPCs that folows traffic rules. It allows you to add vehicles as obstacles in a driving simulation.","title":"Random Traffic Simulator"},{"location":"Components/Traffic/RandomTraffic/RandomTrafficSimulator/#getting-started","text":"","title":"Getting Started"},{"location":"Components/Traffic/RandomTraffic/RandomTrafficSimulator/#overview","text":"The RandomTraffic system consists of the following components: RandomTrafficSimulator component manages lifecycle of NPCs and simulates NPC behaviours. Additional Environment components( TrafficLane , TrafficIntersection and StopLine ) helps you to annotate traffic rules. NPCVehicle components are updated by RandomTrafficSimulator Ego vehicle can be referenced to be considered in the simulation steps.","title":"Overview"},{"location":"Components/Traffic/RandomTraffic/RandomTrafficSimulator/#quick-start","text":"Prepare nishishinjuku environment assets. Open and play Scenes/Main/RandomTraffic.unity . NPCs should be generated in the scene and move along the lanes. You can control ego vehicle with arrow keys For manual setup, please read Components Settings and Add Environment for Random Traffic","title":"Quick Start"},{"location":"Components/Traffic/RandomTraffic/RandomTrafficSimulator/#components-settings","text":"Parameter Description Seed Seed value for random generator Ego Vehicle Transform of ego vehicle Vehicle Layer Mask LayerMask that masks only vehicle(NPC and ego) colliders Ground Layer Mask LayerMask that masks only ground colliders of the map NPC Vehicle Settings Max Vehicle Count Maximum number of NPC vehicles NPC Prefabs Prefabs of NPC vehicles which should have NPCVehicle component Spawnable Lanes TrafficLane components where NPC vehicles can spawn Vehicle Config Parameters for NPC vehicle control Sudden Deceleration is a deceleration during emergency braking Debug Show Gizmos Enable the checkbox to show editor gizmos that visualize behaviours of NPCs","title":"Components Settings"},{"location":"Components/Traffic/RandomTraffic/RandomTrafficSimulator/#gizmos","text":"Gizmos are useful for checking current behavior of NPCs and its causes. Gizmos have a high display load so please disable it if the editor is laggy.","title":"Gizmos"},{"location":"Components/Vehicle/AWSIMVehicle/","text":"AWSIM Vehicle Info AWSIM Vehicle Dynamics is currently under development. However, it is mostly functional. Sample Vehicle - Lexus RX450h AWSIM includes a Lexus RX450h vehicle in the sample. Prefab path is AWSIM\\Assets\\AWSIM\\Prefabs\\VehiclesWithSensor\\Lexus RX450h 2015 Sample Sensor.prefab Vehicle Dynamics Concept The concept is VehicleDynamics suitable for Autoware's autoware_auto_control_msgs/AckermannControlCommand and autoware_auto_vehicle_msgs/GearCommand msg interface. features Longitudinal control by acceleration (m/s^2) Lateral control by two-wheel model Yaw, roll and pitch changes by physics engine Mass-spring-damer suspension model Logical, not mechanical, automatic gears Required vehicle parameters Info In general, measuring the moment of inertia is not easy, and past papers published by NHTSA are helpful. Measured Vehicle Inertial Parameters - NHTSA 1998 parameter example unit mass 1500 kg wheel base 2.5 m tread width Ft : 1.8, Rr : 1.8 m center of mass position x : 0, y : 0.5, z : 0 m moment of inertia yaw : 2000, roll : 2000, pitch : 700 kgm^2 spring rate Ft : 55000, Rr : 48000 N damper rate Ft : 3000, Rr : 2500 N/s suspension stroke Ft : 0.2, Rr 0.2 m wheel radius 0.365 m Vehicle Scripts Vehicle scripts path is AWSIM\\Assets\\AWSIM\\Scripts\\Vehicles\\* script feature Vehicle.cs Vehicle dynamics core class VehicleKeyboardInput.cs Input control by keyboard VehicleRosInput.cs Input control by ROS VehicleVisualEffect.cs` Visual effects such as brake and turn signals Vehicle API Vehicle.cs API list. Input API Check See also VehicleKeyboardInput.cs , VehicleRosInput.cs . input API type feature Vehicle.AccelerationInput float Acceleration input (m/s^2). In the plane, output the force that will result in this acceleration. On a slope, it is affected by the slope resistance, so it does not match the input. Vehicle.SteerAngleInput float Vehicle steering input. Tire angle (degree). Negative is left, positive is right turn tire angle. Vehicle.AutomaticShiftInput enum Vehicle gear shift input (AT). PARKING, REVERSE, NEUTRAL, DRIVE. Vehicle.SignalInput enum Vehicle turn signal input. NONE, LEFT, RIGHT, HAZARD. Output API output API type feature Vehicle.LocalAcceleration Vector3 Acceleration(m/s^2) in the local coordinate system of the vehicle. Vehicle.Speed float Vehicle speed (m/s). Vehicle.SteerAngle float Vehicle steering angle (degree). Vehicle.Signal enum Vehicle turn signal. Vehicle.Velocity vector3 Vehicle velocity (m/s) Vehicle.LocalVelcoity vector3 Vehicle local velocity (m/s) Vehicle.AngularVelocity vector3 Vehicle angular velocity (rad/s) ROS2 Control Topics VehicleRosInput subscribes to these topics and applies them to the Vehicle topic msg frame_id hz QoS /control/command/turn_indicators_cmd autoware_auto_vehicle_msgs/TurnIndicatorsCommand none 10 Reliable , TransientLocal , KeepLast/1 /control/command/hazard_lights_cmd autoware_auto_vehicle_msgs/HazardLightsCommand none 10 Reliable , TransientLocal , KeepLast/1 /control/command/control_cmd autoware_auto_control_msgs/AckermannControlCommand none 60 Reliable , TransientLocal , KeepLast/1 /control/command/gear_cmd autoware_auto_vehicle_msgs/GearCommand none 10 Reliable , TransientLocal , KeepLast/1 /control/command/emergency_cmd tier4_vehicle_msgs/msg/VehicleEmergencyStamped none 60 Reliable , TransientLocal , KeepLast/1","title":"AWSIM Vehicle"},{"location":"Components/Vehicle/AWSIMVehicle/#awsim-vehicle","text":"Info AWSIM Vehicle Dynamics is currently under development. However, it is mostly functional.","title":"AWSIM Vehicle"},{"location":"Components/Vehicle/AWSIMVehicle/#sample-vehicle-lexus-rx450h","text":"AWSIM includes a Lexus RX450h vehicle in the sample. Prefab path is AWSIM\\Assets\\AWSIM\\Prefabs\\VehiclesWithSensor\\Lexus RX450h 2015 Sample Sensor.prefab","title":"Sample Vehicle - Lexus RX450h"},{"location":"Components/Vehicle/AWSIMVehicle/#vehicle-dynamics-concept","text":"The concept is VehicleDynamics suitable for Autoware's autoware_auto_control_msgs/AckermannControlCommand and autoware_auto_vehicle_msgs/GearCommand msg interface. features Longitudinal control by acceleration (m/s^2) Lateral control by two-wheel model Yaw, roll and pitch changes by physics engine Mass-spring-damer suspension model Logical, not mechanical, automatic gears","title":"Vehicle Dynamics Concept"},{"location":"Components/Vehicle/AWSIMVehicle/#required-vehicle-parameters","text":"Info In general, measuring the moment of inertia is not easy, and past papers published by NHTSA are helpful. Measured Vehicle Inertial Parameters - NHTSA 1998 parameter example unit mass 1500 kg wheel base 2.5 m tread width Ft : 1.8, Rr : 1.8 m center of mass position x : 0, y : 0.5, z : 0 m moment of inertia yaw : 2000, roll : 2000, pitch : 700 kgm^2 spring rate Ft : 55000, Rr : 48000 N damper rate Ft : 3000, Rr : 2500 N/s suspension stroke Ft : 0.2, Rr 0.2 m wheel radius 0.365 m","title":"Required vehicle parameters"},{"location":"Components/Vehicle/AWSIMVehicle/#vehicle-scripts","text":"Vehicle scripts path is AWSIM\\Assets\\AWSIM\\Scripts\\Vehicles\\* script feature Vehicle.cs Vehicle dynamics core class VehicleKeyboardInput.cs Input control by keyboard VehicleRosInput.cs Input control by ROS VehicleVisualEffect.cs` Visual effects such as brake and turn signals","title":"Vehicle Scripts"},{"location":"Components/Vehicle/AWSIMVehicle/#vehicle-api","text":"Vehicle.cs API list.","title":"Vehicle API"},{"location":"Components/Vehicle/AWSIMVehicle/#input-api","text":"Check See also VehicleKeyboardInput.cs , VehicleRosInput.cs . input API type feature Vehicle.AccelerationInput float Acceleration input (m/s^2). In the plane, output the force that will result in this acceleration. On a slope, it is affected by the slope resistance, so it does not match the input. Vehicle.SteerAngleInput float Vehicle steering input. Tire angle (degree). Negative is left, positive is right turn tire angle. Vehicle.AutomaticShiftInput enum Vehicle gear shift input (AT). PARKING, REVERSE, NEUTRAL, DRIVE. Vehicle.SignalInput enum Vehicle turn signal input. NONE, LEFT, RIGHT, HAZARD.","title":"Input API"},{"location":"Components/Vehicle/AWSIMVehicle/#output-api","text":"output API type feature Vehicle.LocalAcceleration Vector3 Acceleration(m/s^2) in the local coordinate system of the vehicle. Vehicle.Speed float Vehicle speed (m/s). Vehicle.SteerAngle float Vehicle steering angle (degree). Vehicle.Signal enum Vehicle turn signal. Vehicle.Velocity vector3 Vehicle velocity (m/s) Vehicle.LocalVelcoity vector3 Vehicle local velocity (m/s) Vehicle.AngularVelocity vector3 Vehicle angular velocity (rad/s)","title":"Output API"},{"location":"Components/Vehicle/AWSIMVehicle/#ros2-control-topics","text":"VehicleRosInput subscribes to these topics and applies them to the Vehicle topic msg frame_id hz QoS /control/command/turn_indicators_cmd autoware_auto_vehicle_msgs/TurnIndicatorsCommand none 10 Reliable , TransientLocal , KeepLast/1 /control/command/hazard_lights_cmd autoware_auto_vehicle_msgs/HazardLightsCommand none 10 Reliable , TransientLocal , KeepLast/1 /control/command/control_cmd autoware_auto_control_msgs/AckermannControlCommand none 60 Reliable , TransientLocal , KeepLast/1 /control/command/gear_cmd autoware_auto_vehicle_msgs/GearCommand none 10 Reliable , TransientLocal , KeepLast/1 /control/command/emergency_cmd tier4_vehicle_msgs/msg/VehicleEmergencyStamped none 60 Reliable , TransientLocal , KeepLast/1","title":"ROS2 Control Topics"},{"location":"Components/Vehicle/AddVehicle/","text":"Add New Vehicle 1. Prepare Vehicle 3D models You can check the fbx of Lexus rx450h in the sample. Path : Assets\\AWSIM\\Models\\Vehicles\\Lexus RX450h 2015 These meshes need to be divided. Body Each wheel Steering These materials need to be divided. HeadLight BrakeLight TurnSignal ReverseLight 2. Setup Physics & Collider Attach and configure Rigidbody Create MeshCollider for Body Set up WheelCollider on each wheel. Also attach the editor extension script for WheelColliderConfig.cs , which automatically sets unnecessary parameters of WheelCollider . Set up parameters through the WheelColliderConfig inspector. 3. Attach Script & Configuration Wheel.cs Attach Wheel.cs script to each WheelCollider property feature WheelCollider See WheelCollider. (automatically referenced) WheelVisualTransform Reference to WheelVisual Object Vehicle.cs Attach Vehicle.cs script to vehicle root game object property feature CenterOfMass Center of Mass position set by transform UseInertia Define moment of inertia? Inertia Moment of inertia when UseInertia is true. (kgm^2) Front, Rear Axle Reference to each Wheel component VehicleVisualEffect.cs Attach VehicleVisualEffect.cs script to the object to which Vehicle.cs is attached property feature Vehicle Reference to Vehicle component Brake Lights Brake light materials Left, Right Turn Signal Lights Turn signal light materials Turn Signal Timer Interval Sec Blink time of turn signal light Reverse Lights Reverse light materials VehicleROSInput.cs Attach VehicleROSInput.cs script to the object ot which Vehicle.cs is attached. You can configure the Topic of each msg to subscribe in ROS2. When this script is attached, default values are set. (Attach VehicleKeyboardInput.cs depending on the application. It can be operated with a keyboard.)","title":"Add New Vehicle"},{"location":"Components/Vehicle/AddVehicle/#add-new-vehicle","text":"","title":"Add New Vehicle"},{"location":"Components/Vehicle/AddVehicle/#1-prepare-vehicle-3d-models","text":"You can check the fbx of Lexus rx450h in the sample. Path : Assets\\AWSIM\\Models\\Vehicles\\Lexus RX450h 2015 These meshes need to be divided. Body Each wheel Steering These materials need to be divided. HeadLight BrakeLight TurnSignal ReverseLight","title":"1. Prepare Vehicle 3D models"},{"location":"Components/Vehicle/AddVehicle/#2-setup-physics-collider","text":"Attach and configure Rigidbody Create MeshCollider for Body Set up WheelCollider on each wheel. Also attach the editor extension script for WheelColliderConfig.cs , which automatically sets unnecessary parameters of WheelCollider . Set up parameters through the WheelColliderConfig inspector.","title":"2. Setup Physics &amp; Collider"},{"location":"Components/Vehicle/AddVehicle/#3-attach-script-configuration","text":"Wheel.cs Attach Wheel.cs script to each WheelCollider property feature WheelCollider See WheelCollider. (automatically referenced) WheelVisualTransform Reference to WheelVisual Object Vehicle.cs Attach Vehicle.cs script to vehicle root game object property feature CenterOfMass Center of Mass position set by transform UseInertia Define moment of inertia? Inertia Moment of inertia when UseInertia is true. (kgm^2) Front, Rear Axle Reference to each Wheel component VehicleVisualEffect.cs Attach VehicleVisualEffect.cs script to the object to which Vehicle.cs is attached property feature Vehicle Reference to Vehicle component Brake Lights Brake light materials Left, Right Turn Signal Lights Turn signal light materials Turn Signal Timer Interval Sec Blink time of turn signal light Reverse Lights Reverse light materials VehicleROSInput.cs Attach VehicleROSInput.cs script to the object ot which Vehicle.cs is attached. You can configure the Topic of each msg to subscribe in ROS2. When this script is attached, default values are set. (Attach VehicleKeyboardInput.cs depending on the application. It can be operated with a keyboard.)","title":"3. Attach Script &amp; Configuration"},{"location":"Components/Vehicle/CustomizeVehicleDynamics/","text":"Note TODO: write","title":"Index"},{"location":"DeveloperGuide/Contact/","text":"Contact English/\u65e5\u672c\u8a9e OK e-mail : takatoki.makino@tier4.jp twitter : mackierx111","title":"Contact"},{"location":"DeveloperGuide/Contact/#contact","text":"English/\u65e5\u672c\u8a9e OK e-mail : takatoki.makino@tier4.jp twitter : mackierx111","title":"Contact"},{"location":"DeveloperGuide/Documentation/","text":"Documentation This document uses Material for MkDocs . Local hosting 1 Install Material for MkDocs. (skip if already installed) $ pip install mkdocs-material 2 Hosting on localhost. $ cd AWSIM $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0.16 seconds INFO - [03:13:22] Watching paths for changes: 'docs', 'mkdocs.yml' INFO - [03:13:22] Serving on http://127.0.0.1:8000/ 3 Access http://127.0.0.1:8000/ with a web browser. (TODO change image) see also Material for MkDocs - Getting started MkDocs files Use the following /docs directory and mkdocs.yml for documentation. AWSIM \u251c\u2500 docs/ // md and image file for each document. \u2514\u2500 mkdocs.yml // mkdocs config. Create one directory per document. For example, the directory structure of this \"Documentation\" page might look like this. AWSIM \u2514\u2500 docs/ // Root of all documents \u2514\u2500 DeveloperGuide // Category \u2514\u2500 Documentation // Root of each document \u251c\u2500 index.md // Markdown file \u2514\u2500 image_0.png // Images used in markdown file Deploy & Hosting When docs are pushed to the main branch, they are deployed to GitHub Pages using GitHub Actions. See also Material for MkDocs - Publishing your site","title":"Documentation"},{"location":"DeveloperGuide/Documentation/#documentation","text":"This document uses Material for MkDocs .","title":"Documentation"},{"location":"DeveloperGuide/Documentation/#local-hosting","text":"1 Install Material for MkDocs. (skip if already installed) $ pip install mkdocs-material 2 Hosting on localhost. $ cd AWSIM $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0.16 seconds INFO - [03:13:22] Watching paths for changes: 'docs', 'mkdocs.yml' INFO - [03:13:22] Serving on http://127.0.0.1:8000/ 3 Access http://127.0.0.1:8000/ with a web browser. (TODO change image) see also Material for MkDocs - Getting started","title":"Local hosting"},{"location":"DeveloperGuide/Documentation/#mkdocs-files","text":"Use the following /docs directory and mkdocs.yml for documentation. AWSIM \u251c\u2500 docs/ // md and image file for each document. \u2514\u2500 mkdocs.yml // mkdocs config. Create one directory per document. For example, the directory structure of this \"Documentation\" page might look like this. AWSIM \u2514\u2500 docs/ // Root of all documents \u2514\u2500 DeveloperGuide // Category \u2514\u2500 Documentation // Root of each document \u251c\u2500 index.md // Markdown file \u2514\u2500 image_0.png // Images used in markdown file","title":"MkDocs files"},{"location":"DeveloperGuide/Documentation/#deploy-hosting","text":"When docs are pushed to the main branch, they are deployed to GitHub Pages using GitHub Actions. See also Material for MkDocs - Publishing your site","title":"Deploy &amp; Hosting"},{"location":"DeveloperGuide/License/","text":"License AWSIM Licenses AWSIM specific code is distributed under Apache2.0 License. The following extensions are included ( *.cs *.compute *.xml ) AWSIM specific assets are distributed under CC-BY NC License. The following extensions are included ( *.fbx *.pcd *.osm *.png *.anim *.unitypackage ) Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2022 TIER IV, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Attribution-NonCommercial 4.0 International ======================================================================= Creative Commons Corporation (\"Creative Commons\") is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \"as-is\" basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible. Using Creative Commons Public Licenses Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC- licensed material, or material used under an exception or limitation to copyright. More considerations for licensors: wiki.creativecommons.org/Considerations_for_licensors Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor's permission is not necessary for any reason--for example, because of any applicable exception or limitation to copyright--then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More considerations for the public: wiki.creativecommons.org/Considerations_for_licensees ======================================================================= Creative Commons Attribution-NonCommercial 4.0 International Public License By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions. Section 1 -- Definitions. a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Adapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License. c. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. d. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. e. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. f. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. g. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. h. Licensor means the individual(s) or entity(ies) granting rights under this Public License. i. NonCommercial means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this Public License, the exchange of the Licensed Material for other material subject to Copyright and Similar Rights by digital file-sharing or similar means is NonCommercial provided there is no payment of monetary compensation in connection with the exchange. j. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. k. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. l. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning. Section 2 -- Scope. a. License grant. 1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: a. reproduce and Share the Licensed Material, in whole or in part, for NonCommercial purposes only; and b. produce, reproduce, and Share Adapted Material for NonCommercial purposes only. 2. Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. 3. Term. The term of this Public License is specified in Section 6(a). 4. Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a) (4) never produces Adapted Material. 5. Downstream recipients. a. Offer from the Licensor -- Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. b. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. 6. No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. 1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. 2. Patent and trademark rights are not licensed under this Public License. 3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties, including when the Licensed Material is used other than for NonCommercial purposes. Section 3 -- License Conditions. Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. 1. If You Share the Licensed Material (including in modified form), You must: a. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; b. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and c. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. 2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. 3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. 4. If You Share Adapted Material You produce, the Adapter's License You apply must not prevent recipients of the Adapted Material from complying with this Public License. Section 4 -- Sui Generis Database Rights. Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database for NonCommercial purposes only; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights. Section 5 -- Disclaimer of Warranties and Limitation of Liability. a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU. b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability. Section 6 -- Term and Termination. a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: 1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or 2. upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License. Section 7 -- Other Terms and Conditions. a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License. Section 8 -- Interpretation. a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. ======================================================================= Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark \"Creative Commons\" or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org.","title":"License"},{"location":"DeveloperGuide/License/#license","text":"AWSIM Licenses AWSIM specific code is distributed under Apache2.0 License. The following extensions are included ( *.cs *.compute *.xml ) AWSIM specific assets are distributed under CC-BY NC License. The following extensions are included ( *.fbx *.pcd *.osm *.png *.anim *.unitypackage ) Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2022 TIER IV, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Attribution-NonCommercial 4.0 International ======================================================================= Creative Commons Corporation (\"Creative Commons\") is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \"as-is\" basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible. Using Creative Commons Public Licenses Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC- licensed material, or material used under an exception or limitation to copyright. More considerations for licensors: wiki.creativecommons.org/Considerations_for_licensors Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor's permission is not necessary for any reason--for example, because of any applicable exception or limitation to copyright--then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More considerations for the public: wiki.creativecommons.org/Considerations_for_licensees ======================================================================= Creative Commons Attribution-NonCommercial 4.0 International Public License By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions. Section 1 -- Definitions. a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Adapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License. c. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. d. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. e. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. f. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. g. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. h. Licensor means the individual(s) or entity(ies) granting rights under this Public License. i. NonCommercial means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this Public License, the exchange of the Licensed Material for other material subject to Copyright and Similar Rights by digital file-sharing or similar means is NonCommercial provided there is no payment of monetary compensation in connection with the exchange. j. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. k. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. l. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning. Section 2 -- Scope. a. License grant. 1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: a. reproduce and Share the Licensed Material, in whole or in part, for NonCommercial purposes only; and b. produce, reproduce, and Share Adapted Material for NonCommercial purposes only. 2. Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. 3. Term. The term of this Public License is specified in Section 6(a). 4. Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a) (4) never produces Adapted Material. 5. Downstream recipients. a. Offer from the Licensor -- Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. b. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. 6. No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. 1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. 2. Patent and trademark rights are not licensed under this Public License. 3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties, including when the Licensed Material is used other than for NonCommercial purposes. Section 3 -- License Conditions. Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. 1. If You Share the Licensed Material (including in modified form), You must: a. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; b. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and c. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. 2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. 3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. 4. If You Share Adapted Material You produce, the Adapter's License You apply must not prevent recipients of the Adapted Material from complying with this Public License. Section 4 -- Sui Generis Database Rights. Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database for NonCommercial purposes only; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights. Section 5 -- Disclaimer of Warranties and Limitation of Liability. a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU. b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability. Section 6 -- Term and Termination. a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: 1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or 2. upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License. Section 7 -- Other Terms and Conditions. a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License. Section 8 -- Interpretation. a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. ======================================================================= Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark \"Creative Commons\" or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org.","title":"License"},{"location":"DeveloperGuide/TroubleShooting/","text":"Trouble shooting trouble solution Massive output of Plugins errors git clone again error : RuntimeError: error not set, at C:\\ci\\ws\\src\\ros2\\rcl\\rcl\\src\\rcl\\node.c:262 Set up environment variables and config around ROS2 correctly. - Environment variables - cyclonedds_config.xml - etc $ ros2 topic list is not displayed - ROS_DOMAIN_ID is different - ROS not sourced in AWSIM(windows) -> Autoware(ubuntu), $ ros2 topic list is not displayed. Allowed by windows firewall self-driving stops in the middle of the road. Maybe bad map data (PointCloud, VectorMap, fbx)6 Connecting AWSIM and Autoware results in bad network Make ros local host-only. Include the following in the .bashrc (The password will be requested at terminal startup after OS startup.) export ROS_LOCALHOST_ONLY=1 export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp if [ ! -e /tmp/cycloneDDS_configured ]; then sudo sysctl -w net.core.rmem_max=2147483647 sudo ip link set lo multicast on touch /tmp/cycloneDDS_configured fi","title":"Trouble shooting"},{"location":"DeveloperGuide/TroubleShooting/#trouble-shooting","text":"trouble solution Massive output of Plugins errors git clone again error : RuntimeError: error not set, at C:\\ci\\ws\\src\\ros2\\rcl\\rcl\\src\\rcl\\node.c:262 Set up environment variables and config around ROS2 correctly. - Environment variables - cyclonedds_config.xml - etc $ ros2 topic list is not displayed - ROS_DOMAIN_ID is different - ROS not sourced in AWSIM(windows) -> Autoware(ubuntu), $ ros2 topic list is not displayed. Allowed by windows firewall self-driving stops in the middle of the road. Maybe bad map data (PointCloud, VectorMap, fbx)6 Connecting AWSIM and Autoware results in bad network Make ros local host-only. Include the following in the .bashrc (The password will be requested at terminal startup after OS startup.) export ROS_LOCALHOST_ONLY=1 export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp if [ ! -e /tmp/cycloneDDS_configured ]; then sudo sysctl -w net.core.rmem_max=2147483647 sudo ip link set lo multicast on touch /tmp/cycloneDDS_configured fi","title":"Trouble shooting"},{"location":"GettingStarted/QuickStartDemo/","text":"Quick Start Demo This page describes a Self-driving simulation connected to the AWSIM demo binary and Autoware. Use one Ubuntu PC. The simulation provided in the AWSIM demo has the following settings. AWSIM Demo Settings Vehicle Lexus RX 450h Environment Japan Tokyo Nishishinjuku Sensors Gnss * 1 IMU * 1 LiDAR * 1 Traffic camera * 1 Traffic Randomized traffic 1. Check the required specifications PC specifications that meet the following requirements are required. Required PC Specs OS Ubutnu 20.04 CPU 6cores and 12thread or higher GPU RTX2080Ti or higher 2. ROS localhost settings Add the following to .bashrc export ROS_LOCALHOST_ONLY=1 export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp if [ ! -e /tmp/cycloneDDS_configured ]; then sudo sysctl -w net.core.rmem_max=2147483647 sudo ip link set lo multicast on touch /tmp/cycloneDDS_configured fi 3. Launch AWSIM Demo binary Install Nvidia GPU driver (Skip if already installed). Add Nvidia driver to apt repository sudo add-apt-repository ppa:graphics-drivers/ppa Check supported Nvidia driver versions. sudo apt update Install the recommended version. sudo ubuntu-drivers autoinstall reboot and check nvidia-smi. $ nvidia-smi Fri Oct 14 01:41:05 2022 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 515.65.01 Driver Version: 515.65.01 CUDA Version: 11.7 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |===============================+======================+======================| | 0 NVIDIA GeForce ... Off | 00000000:01:00.0 On | N/A | | 37% 31C P8 30W / 250W | 188MiB / 11264MiB | 3% Default | | | | N/A | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=============================================================================| | 0 N/A N/A 1151 G /usr/lib/xorg/Xorg 133MiB | | 0 N/A N/A 1470 G /usr/bin/gnome-shell 45MiB | +-----------------------------------------------------------------------------+ Install Vulkun Graphics Library (Skip if already installed). Update environment. sudo apt update Install libvulkan1. sudo apt install libvulkan1 Download and Run AWSIM Demo binary. Download AWSIM_vXXX.zip and Unzip. Download AWSIM Demo for ubuntu Allow permission. Check the Execute checkbox. Launch AWSIM_demo.x86_64 . ./<path to AWSIM_demo folder>/AWSIM_demo.x86_64 Warning It may take a little time to start up. 4. Launch Autoware Download map files(pcd, osm) and unzip. Download Map files (pcd, osm) Clone autoware and move to the directory. git clone https://github.com/autowarefoundation/autoware.git cd autoware Switch branches to awsim-stable . (The latest main branch may work, but awsim-stable will definitely work.) git checkout awsim-stable Setup environment. If you have already prepared an Autoware environment, you don't need to run this. ./setup-dev-env.sh Create the src directory and clone repositories into it. mkdir src vcs import src < autoware.repos Install dependent ROS packages. source /opt/ros/galactic/setup.bash rosdep update rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO Reduce processing load. This can only be applied to awsim-stable branch. cd <path_to_your_autoware_folder> wget \"https://drive.google.com/uc?export=download&id=11mkwfg-OaXIp3Z5c3R58Pob3butKwE1Z\" -O patch.sh bash patch.sh && rm patch.sh Build the workspace. colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=\"-w\" Launch Autoware. <your mapfile location> should be changed arbitrarily. You cannot use ~ to specify the path. source install/setup.bash ros2 launch autoware_launch e2e_simulator.launch.xml vehicle_model:=sample_vehicle sensor_model:=awsim_sensor_kit map_path:=<your mapfile location> 5. Let's Self-Driving simulation Launch both AWSIM and Autoware. Automatically set 2D Pose Estimate with RViz. Info If it does not set automatically, please try manually. 3. Manually set 2D Goal Pose with RViz. 4. Set 2D Checkpoint Pose (Optional). Path generated. 5. Engage self-driving. Open new terminal and engage self-driving !! ros2 topic pub /autoware/engage autoware_auto_vehicle_msgs/msg/Engage '{engage: True}' -1 Appendix AWSIM ROS2 topic list","title":"Quick Start Demo"},{"location":"GettingStarted/QuickStartDemo/#quick-start-demo","text":"This page describes a Self-driving simulation connected to the AWSIM demo binary and Autoware. Use one Ubuntu PC. The simulation provided in the AWSIM demo has the following settings. AWSIM Demo Settings Vehicle Lexus RX 450h Environment Japan Tokyo Nishishinjuku Sensors Gnss * 1 IMU * 1 LiDAR * 1 Traffic camera * 1 Traffic Randomized traffic","title":"Quick Start Demo"},{"location":"GettingStarted/QuickStartDemo/#1-check-the-required-specifications","text":"PC specifications that meet the following requirements are required. Required PC Specs OS Ubutnu 20.04 CPU 6cores and 12thread or higher GPU RTX2080Ti or higher","title":"1. Check the required specifications"},{"location":"GettingStarted/QuickStartDemo/#2-ros-localhost-settings","text":"Add the following to .bashrc export ROS_LOCALHOST_ONLY=1 export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp if [ ! -e /tmp/cycloneDDS_configured ]; then sudo sysctl -w net.core.rmem_max=2147483647 sudo ip link set lo multicast on touch /tmp/cycloneDDS_configured fi","title":"2. ROS localhost settings"},{"location":"GettingStarted/QuickStartDemo/#3-launch-awsim-demo-binary","text":"Install Nvidia GPU driver (Skip if already installed). Add Nvidia driver to apt repository sudo add-apt-repository ppa:graphics-drivers/ppa Check supported Nvidia driver versions. sudo apt update Install the recommended version. sudo ubuntu-drivers autoinstall reboot and check nvidia-smi. $ nvidia-smi Fri Oct 14 01:41:05 2022 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 515.65.01 Driver Version: 515.65.01 CUDA Version: 11.7 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |===============================+======================+======================| | 0 NVIDIA GeForce ... Off | 00000000:01:00.0 On | N/A | | 37% 31C P8 30W / 250W | 188MiB / 11264MiB | 3% Default | | | | N/A | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=============================================================================| | 0 N/A N/A 1151 G /usr/lib/xorg/Xorg 133MiB | | 0 N/A N/A 1470 G /usr/bin/gnome-shell 45MiB | +-----------------------------------------------------------------------------+ Install Vulkun Graphics Library (Skip if already installed). Update environment. sudo apt update Install libvulkan1. sudo apt install libvulkan1 Download and Run AWSIM Demo binary. Download AWSIM_vXXX.zip and Unzip. Download AWSIM Demo for ubuntu Allow permission. Check the Execute checkbox. Launch AWSIM_demo.x86_64 . ./<path to AWSIM_demo folder>/AWSIM_demo.x86_64 Warning It may take a little time to start up.","title":"3. Launch AWSIM Demo binary"},{"location":"GettingStarted/QuickStartDemo/#4-launch-autoware","text":"Download map files(pcd, osm) and unzip. Download Map files (pcd, osm) Clone autoware and move to the directory. git clone https://github.com/autowarefoundation/autoware.git cd autoware Switch branches to awsim-stable . (The latest main branch may work, but awsim-stable will definitely work.) git checkout awsim-stable Setup environment. If you have already prepared an Autoware environment, you don't need to run this. ./setup-dev-env.sh Create the src directory and clone repositories into it. mkdir src vcs import src < autoware.repos Install dependent ROS packages. source /opt/ros/galactic/setup.bash rosdep update rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO Reduce processing load. This can only be applied to awsim-stable branch. cd <path_to_your_autoware_folder> wget \"https://drive.google.com/uc?export=download&id=11mkwfg-OaXIp3Z5c3R58Pob3butKwE1Z\" -O patch.sh bash patch.sh && rm patch.sh Build the workspace. colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=\"-w\" Launch Autoware. <your mapfile location> should be changed arbitrarily. You cannot use ~ to specify the path. source install/setup.bash ros2 launch autoware_launch e2e_simulator.launch.xml vehicle_model:=sample_vehicle sensor_model:=awsim_sensor_kit map_path:=<your mapfile location>","title":"4. Launch Autoware"},{"location":"GettingStarted/QuickStartDemo/#5-lets-self-driving-simulation","text":"Launch both AWSIM and Autoware. Automatically set 2D Pose Estimate with RViz. Info If it does not set automatically, please try manually. 3. Manually set 2D Goal Pose with RViz. 4. Set 2D Checkpoint Pose (Optional). Path generated. 5. Engage self-driving. Open new terminal and engage self-driving !! ros2 topic pub /autoware/engage autoware_auto_vehicle_msgs/msg/Engage '{engage: True}' -1","title":"5. Let's Self-Driving simulation"},{"location":"GettingStarted/QuickStartDemo/#appendix","text":"AWSIM ROS2 topic list","title":"Appendix"},{"location":"GettingStarted/SetupUnityProject/","text":"Setup Unity Project Info Users are recommended to do the Quick start demo tutorial first. Quick Start Demo This page is a tutorial for setting up a Unity project by cloning the AWSIM repository. How to setup on ubuntu 1. Preparation Ubuntu Windows Prepare a desktop PC with Ubuntu 20.04 installed. See Check the required specifications . (PC spec requirements vary depending on simulation content.) Install Nvidia driver and Vulkan Graphics API. See Install Nvidia GPU driver . Install git . TODO: write 2. Install Unity 2021.1.7f1 AWSIM's Unity version is currently 2021.1.7f1 Install UnityHub to manage UnityProject. Go to https://unity3d.com/get-unity/download to download UnityHub.AppImage . Install Unity 2021.1.7f1 via UnityHub. ./UnityHub.AppImage installed. 3. Clone AWSIM repository git clone git@github.com:tier4/AWSIM.git 4. Open AWSIM Unity project Launch UnityHub. ./UnityHub.AppImage Press Open button. 5. Import Environment custom package Download and Import Japan_Tokyo_Nishishinjuku.unitypackage . this is environment 3d map. Download Map files (unitypackage) Import Japan_Tokyo_Nishishinjuku.unitypackage . Select from the menu bar at the top Assets -> Import Package -> Custom Package . Info Import the Custom Package into the gitignore directory because the environment map has a large file size. 3. Check that Nishishinjuku Package has been imported under Assets/AWSIM/Externals/ . ( Externals directory is gitignored.) 6. Run demo scene Open Assets\\AWSIM\\Scenes\\Main\\AutowareSimulation.unity Run AutowareSimulation.unity","title":"Setup Unity Project"},{"location":"GettingStarted/SetupUnityProject/#setup-unity-project","text":"Info Users are recommended to do the Quick start demo tutorial first. Quick Start Demo This page is a tutorial for setting up a Unity project by cloning the AWSIM repository.","title":"Setup Unity Project"},{"location":"GettingStarted/SetupUnityProject/#how-to-setup-on-ubuntu","text":"","title":"How to setup on ubuntu"},{"location":"GettingStarted/SetupUnityProject/#1-preparation","text":"Ubuntu Windows Prepare a desktop PC with Ubuntu 20.04 installed. See Check the required specifications . (PC spec requirements vary depending on simulation content.) Install Nvidia driver and Vulkan Graphics API. See Install Nvidia GPU driver . Install git . TODO: write","title":"1. Preparation"},{"location":"GettingStarted/SetupUnityProject/#2-install-unity-202117f1","text":"AWSIM's Unity version is currently 2021.1.7f1 Install UnityHub to manage UnityProject. Go to https://unity3d.com/get-unity/download to download UnityHub.AppImage . Install Unity 2021.1.7f1 via UnityHub. ./UnityHub.AppImage installed.","title":"2. Install Unity 2021.1.7f1"},{"location":"GettingStarted/SetupUnityProject/#3-clone-awsim-repository","text":"git clone git@github.com:tier4/AWSIM.git","title":"3. Clone AWSIM repository"},{"location":"GettingStarted/SetupUnityProject/#4-open-awsim-unity-project","text":"Launch UnityHub. ./UnityHub.AppImage Press Open button.","title":"4. Open AWSIM Unity project"},{"location":"GettingStarted/SetupUnityProject/#5-import-environment-custom-package","text":"Download and Import Japan_Tokyo_Nishishinjuku.unitypackage . this is environment 3d map. Download Map files (unitypackage) Import Japan_Tokyo_Nishishinjuku.unitypackage . Select from the menu bar at the top Assets -> Import Package -> Custom Package . Info Import the Custom Package into the gitignore directory because the environment map has a large file size. 3. Check that Nishishinjuku Package has been imported under Assets/AWSIM/Externals/ . ( Externals directory is gitignored.)","title":"5. Import Environment custom package"},{"location":"GettingStarted/SetupUnityProject/#6-run-demo-scene","text":"Open Assets\\AWSIM\\Scenes\\Main\\AutowareSimulation.unity Run AutowareSimulation.unity","title":"6. Run demo scene"},{"location":"ProjectGuide/Directory/","text":"Directory AWSIM has the following directory structure. Basically, they are grouped by extension. AWSIM // AWSIM root. \u2502 \u2502 \u251c\u2500Assets // Unity project Assets directory. \u2502 \u2502 // Place external libraries under this directory. \u2502 \u2502 // (such as RGLUnityPlugin, ROS2ForUnity, etc..) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500AWSIM // Includes AWSIM implementation, Asset, etc. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500Externals // git ignore directory. \u2502 \u2502 \u2502 // Place large files, \u2502 \u2502 \u2502 // such as 3D models of the Environment. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500HDRPDefaultResources // Unity HDRP default assets. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500Materials // Materials used commonly in Project. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500Models // 3D models. \u2502 \u2502 \u2502 \u2502 // Textures and materials for 3D models \u2502 \u2502 \u2502 \u2502 // are also included. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500<3D Model> // Directory of each 3D model. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500Materials // Materials used in 3D model. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500Textures // Textures used in 3D model. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500Prefabs // Prefabs. \u2502 \u2502 \u2502 // Not dependent on a specific scene. \u2502 \u2502 \u2502 // Can be used in all scene. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500Scenes // Scenes. \u2502 \u2502 \u2502 \u2502 // Includes scene-specific scripts, etc. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500Main // Scenes used in the simulation. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500Samples // Sample Scenes by Component. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500Scripts // C# codes. \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500RGLUnityPlugin // Robotec GPU LiDAR external Library. \u2502 \u2502 // (TODO) URL \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500Ros2ForUnity // ROS2 communication external Library. \u2502 // https://github.com/RobotecAI/ros2-for-unity \u2502 \u2502 \u251c\u2500Packages // Unity Auto generated directories. \u251c\u2500ProjectSettings // \u251c\u2500UserSettings // \u2502 \u2502 \u2514\u2500docs // AWSIM document. using mkdocs. // https://www.mkdocs.org/","title":"Directory"},{"location":"ProjectGuide/Directory/#directory","text":"AWSIM has the following directory structure. Basically, they are grouped by extension. AWSIM // AWSIM root. \u2502 \u2502 \u251c\u2500Assets // Unity project Assets directory. \u2502 \u2502 // Place external libraries under this directory. \u2502 \u2502 // (such as RGLUnityPlugin, ROS2ForUnity, etc..) \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500AWSIM // Includes AWSIM implementation, Asset, etc. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500Externals // git ignore directory. \u2502 \u2502 \u2502 // Place large files, \u2502 \u2502 \u2502 // such as 3D models of the Environment. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500HDRPDefaultResources // Unity HDRP default assets. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500Materials // Materials used commonly in Project. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500Models // 3D models. \u2502 \u2502 \u2502 \u2502 // Textures and materials for 3D models \u2502 \u2502 \u2502 \u2502 // are also included. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500<3D Model> // Directory of each 3D model. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500Materials // Materials used in 3D model. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500Textures // Textures used in 3D model. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500Prefabs // Prefabs. \u2502 \u2502 \u2502 // Not dependent on a specific scene. \u2502 \u2502 \u2502 // Can be used in all scene. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500Scenes // Scenes. \u2502 \u2502 \u2502 \u2502 // Includes scene-specific scripts, etc. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500Main // Scenes used in the simulation. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500Samples // Sample Scenes by Component. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500Scripts // C# codes. \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500RGLUnityPlugin // Robotec GPU LiDAR external Library. \u2502 \u2502 // (TODO) URL \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500Ros2ForUnity // ROS2 communication external Library. \u2502 // https://github.com/RobotecAI/ros2-for-unity \u2502 \u2502 \u251c\u2500Packages // Unity Auto generated directories. \u251c\u2500ProjectSettings // \u251c\u2500UserSettings // \u2502 \u2502 \u2514\u2500docs // AWSIM document. using mkdocs. // https://www.mkdocs.org/","title":"Directory"},{"location":"ProjectGuide/ExternalLibraries/","text":"External Libraries List of external libraries used in AWSIM. Library use URL ros2-for-unity ROS2 communication https://github.com/RobotecAI/ros2-for-unity Robtoec-GPU-LiDAR LiDAR simulation Not yet open source. PclSharp Mesh2Pcd https://github.com/jbruening/PclSharp","title":"External Libraries"},{"location":"ProjectGuide/ExternalLibraries/#external-libraries","text":"List of external libraries used in AWSIM. Library use URL ros2-for-unity ROS2 communication https://github.com/RobotecAI/ros2-for-unity Robtoec-GPU-LiDAR LiDAR simulation Not yet open source. PclSharp Mesh2Pcd https://github.com/jbruening/PclSharp","title":"External Libraries"},{"location":"ProjectGuide/GitBranch/","text":"Git branch Branches branch explain main Stable branch. All the latest releases are included. develop Development Branch. Develops pre-release functionality. feature/*** Feature implementation branch created from develop. After implementation, it is merged into develop. release/*** Release branch containing release functionality created from the develop branch. it is merge into main. Branch flow Create feature/*** branch from develop. Implement in feature/*** branch. Create a PR from the feature/*** branch to develop branch. Merge. Create release/*** branch from develop. Create a PR from the release/*** branch to main branch. Merge.","title":"Git Branch"},{"location":"ProjectGuide/GitBranch/#git-branch","text":"","title":"Git branch"},{"location":"ProjectGuide/GitBranch/#branches","text":"branch explain main Stable branch. All the latest releases are included. develop Development Branch. Develops pre-release functionality. feature/*** Feature implementation branch created from develop. After implementation, it is merged into develop. release/*** Release branch containing release functionality created from the develop branch. it is merge into main.","title":"Branches"},{"location":"ProjectGuide/GitBranch/#branch-flow","text":"Create feature/*** branch from develop. Implement in feature/*** branch. Create a PR from the feature/*** branch to develop branch. Merge. Create release/*** branch from develop. Create a PR from the release/*** branch to main branch. Merge.","title":"Branch flow"}]}